{"mappings":";;;;;;AAAA;ACAA;;;;AAWe,wDAA6B,UAAE,OAAM,QAAE,KAAI,EAAO,EAAE;IACjE,MAAM,UAAU,MAAM,CAAA,GAAA,iBAAU,AAAD,EAAE,QAAQ,CAAC,MAAM,CAAC;QAAE,MAAM;YAAC;SAAe;IAAC;IAC1E,MAAM,OAAO,MAAM,QAAQ,OAAO;IAElC,MAAM,UAAU,MAAM,CAAA,GAAA,qBAAC,EAAE,QAAQ,CAC/B,CAAA,GAAA,eAAI,AAAD,EAAE,IAAI,CAAC,cAAe,6CACzB;IAGF,MAAM,KAAK,YAAY,CAAC;iBAAE;IAAQ;IAElC,MAAM,SAKF,MAAM,KAAK,QAAQ,CACrB,CAAC,CAAC,YAAY,GAAK;QACjB,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC;QAE3B,IAAI;YACF,8BAA8B,GAC9B,MAAM,UAAU,OAAO,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW;YAC5D,OAAO;gBAAE,QAAQ;yBAAW;YAAQ;QACtC,EAAE,OAAO,OAAO;YACd,OAAO;gBAAE,QAAQ;uBAAS;gBAAO,SAAS,MAAM,OAAO;YAAC;QAC1D;IACF,GACA;QAAC;KAAK;IAGR,MAAM,QAAQ,KAAK;IAEnB,IAAI,OAAO,MAAM,KAAK,aAAa,OAAO,OAAO,OAAO,KAAK,UAC3D,OAAO,OAAO,OAAO;IAGvB,OAAO,KAAK;AACd;;;AD9CA,MAAM,8BAAQ,CAAC,oDAAoD,CAAC;AAEpE,SAAS,+BAAS;IAChB,OAAO,eAAe,YAAY,GAAG,EAAE;QACrC,MAAM,YAAmB,EAAE;QAC3B,CAAA,GAAA,YAAK,AAAD,EAAE,KAAK;YAAE,MAAM;YAAQ,MAAM;QAAU,GAAG,CAAC,MAAM,OAAO,SAAW;YACrE,UAAU,IAAI,CAAC;gBAAC;gBAAM;gBAAO;aAAO;QACtC;QAEA,MAAM,QAAQ,GAAG,CACf,UAAU,GAAG,CAAC,OAAO,CAAC,MAAM,OAAO,OAAO,GAAK;YAC7C,MAAM,OAAO,MAAM,CAAA,GAAA,wCAAY,EAAE;gBAC/B,QAAQ,CAAC;gBACT,MAAM,KAAK,KAAK;YAClB,GAAG,IAAI,CAAC,CAAA,UAAW;YAEnB,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,GAAG;gBAC/B,MAAM;gBACN,OAAO,CAAC,oCAAoC,EAAE,4BAAM,EAAE,EAAE,KAAK,MAAM,CAAC;gBACpE,UAAU,KAAK,QAAQ;YACzB;QACF;QAGF,OAAO;IACT;AACF;IAEA,2CAAe","sources":["src/index.ts","src/render-mermaid.ts"],"sourcesContent":["import { visit } from 'unist-util-visit';\r\nimport renderDiagram from './render-mermaid';\r\n\r\nconst style = `display: flex; justify-content: center; width: 100%;`;\r\n\r\nfunction plugin() {\r\n  return async function transformer(ast) {\r\n    const instances: any[] = [];\r\n    visit(ast, { type: 'code', lang: 'mermaid' }, (node, index, parent) => {\r\n      instances.push([node, index, parent]);\r\n    });\r\n\r\n    await Promise.all(\r\n      instances.map(async ([node, index, parent]) => {\r\n        const html = await renderDiagram({\r\n          config: {},\r\n          code: node.value,\r\n        }).then(diagram => diagram);\r\n\r\n        parent.children.splice(index, 1, {\r\n          type: 'html',\r\n          value: `<div class=\"mermaid-diagram\" style=\"${style}\">${html}</div>`,\r\n          position: node.position,\r\n        });\r\n      }),\r\n    );\r\n\r\n    return ast;\r\n  };\r\n}\r\n\r\nexport default plugin;","import path from 'node:path';\r\nimport fs from 'node:fs/promises';\r\nimport playwright from 'playwright';\r\nimport type mermaidAPI from 'mermaid';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    mermaid: mermaidAPI\r\n  }\r\n}\r\n\r\nexport default async function renderMermaid({ config, code }: any) {\r\n  const browser = await playwright.chromium.launch({ args: ['--no-sandbox'] });\r\n  const page = await browser.newPage();\r\n\r\n  const content = await fs.readFile(\r\n    path.join(process.cwd(), 'node_modules/mermaid/dist/mermaid.min.js'),\r\n    'utf8',\r\n  );\r\n\r\n  await page.addScriptTag({ content });\r\n\r\n  const result: {\r\n    status: string;\r\n    error?: Error;\r\n    message?: string;\r\n    svgCode?: string;\r\n  } = await page.evaluate(\r\n    ([diagramCode]) => {\r\n      window.mermaid.initialize({});\r\n\r\n      try {\r\n        /* Render the mermaid diagram */\r\n        const svgCode = window.mermaid.mermaidAPI.render('diagram', diagramCode);\r\n        return { status: 'success', svgCode };\r\n      } catch (error) {\r\n        return { status: 'error', error, message: error.message };\r\n      }\r\n    },\r\n    [code]\r\n  );\r\n\r\n  await browser.close();\r\n  \r\n  if (result.status === 'success' && typeof result.svgCode === 'string') {\r\n    return result.svgCode;\r\n  }\r\n\r\n  return false;\r\n}"],"names":[],"version":3,"file":"index.mjs.map"}